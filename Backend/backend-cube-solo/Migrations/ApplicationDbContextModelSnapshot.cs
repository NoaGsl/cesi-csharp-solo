// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using backend_cube_solo.Shared.Data;

#nullable disable

namespace backend_cube_solo.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    partial class ApplicationDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.11")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("backend_cube_solo.Api.Admins.Models.Admin", b =>
                {
                    b.Property<int>("AdminId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("admin_id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("AdminId"));

                    b.Property<int>("EmployeeId")
                        .HasColumnType("integer")
                        .HasColumnName("employee_id");

                    b.Property<string>("PasswordHash")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("password_hash");

                    b.Property<string>("Salt")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("salt");

                    b.HasKey("AdminId")
                        .HasName("admins_pkey");

                    b.HasIndex(new[] { "EmployeeId" }, "admins_employee_id_key")
                        .IsUnique();

                    b.ToTable("admins", (string)null);
                });

            modelBuilder.Entity("backend_cube_solo.Api.Departments.Models.Department", b =>
                {
                    b.Property<int>("DepartmentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("department_id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("DepartmentId"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("name");

                    b.HasKey("DepartmentId")
                        .HasName("departments_pkey");

                    b.ToTable("departments", (string)null);

                    b.HasData(
                        new
                        {
                            DepartmentId = 1,
                            Name = "IT"
                        },
                        new
                        {
                            DepartmentId = 2,
                            Name = "HR"
                        },
                        new
                        {
                            DepartmentId = 3,
                            Name = "Finance"
                        },
                        new
                        {
                            DepartmentId = 4,
                            Name = "Marketing"
                        },
                        new
                        {
                            DepartmentId = 5,
                            Name = "Sales"
                        });
                });

            modelBuilder.Entity("backend_cube_solo.Api.Employees.Models.Employee", b =>
                {
                    b.Property<int>("EmployeeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("employee_id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("EmployeeId"));

                    b.Property<int>("DepartmentId")
                        .HasColumnType("integer")
                        .HasColumnName("department_id");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("character varying(150)")
                        .HasColumnName("email");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("first_name");

                    b.Property<bool>("IsAdmin")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(false)
                        .HasColumnName("is_admin");

                    b.Property<DateOnly>("JoinDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("date")
                        .HasColumnName("join_date")
                        .HasDefaultValueSql("CURRENT_DATE");

                    b.Property<string>("LandlinePhoneNumber")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)")
                        .HasColumnName("landline_phone_number");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("last_name");

                    b.Property<DateOnly?>("LeaveDate")
                        .HasColumnType("date")
                        .HasColumnName("leave_date");

                    b.Property<int>("LocationId")
                        .HasColumnType("integer")
                        .HasColumnName("location_id");

                    b.Property<string>("MobilePhoneNumber")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)")
                        .HasColumnName("mobile_phone_number");

                    b.HasKey("EmployeeId")
                        .HasName("employees_pkey");

                    b.HasIndex("DepartmentId");

                    b.HasIndex("LocationId");

                    b.HasIndex(new[] { "Email" }, "employees_email_key")
                        .IsUnique();

                    b.ToTable("employees", (string)null);

                    b.HasData(
                        new
                        {
                            EmployeeId = 1,
                            DepartmentId = 1,
                            Email = "super.admin@gmail.com",
                            FirstName = "Super",
                            IsAdmin = true,
                            JoinDate = new DateOnly(2021, 1, 1),
                            LandlinePhoneNumber = "0123456789",
                            LastName = "Admin",
                            LocationId = 1,
                            MobilePhoneNumber = "0123456789"
                        },
                        new
                        {
                            EmployeeId = 2,
                            DepartmentId = 2,
                            Email = "jhon.doe@gmail.com",
                            FirstName = "John",
                            IsAdmin = false,
                            JoinDate = new DateOnly(2021, 1, 1),
                            LandlinePhoneNumber = "0123456789",
                            LastName = "Doe",
                            LocationId = 1,
                            MobilePhoneNumber = "0123456789"
                        },
                        new
                        {
                            EmployeeId = 3,
                            DepartmentId = 3,
                            Email = "pierre.dupont@gmail.com",
                            FirstName = "Pierre",
                            IsAdmin = false,
                            JoinDate = new DateOnly(2021, 1, 1),
                            LandlinePhoneNumber = "0123456789",
                            LastName = "Dupont",
                            LocationId = 2,
                            MobilePhoneNumber = "0123456789"
                        });
                });

            modelBuilder.Entity("backend_cube_solo.Api.Locations.Models.Location", b =>
                {
                    b.Property<int>("LocationId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("location_id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("LocationId"));

                    b.Property<string>("City")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("city");

                    b.HasKey("LocationId")
                        .HasName("locations_pkey");

                    b.ToTable("locations", (string)null);

                    b.HasData(
                        new
                        {
                            LocationId = 1,
                            City = "Paris"
                        },
                        new
                        {
                            LocationId = 2,
                            City = "Nantes"
                        },
                        new
                        {
                            LocationId = 3,
                            City = "Toulouse"
                        },
                        new
                        {
                            LocationId = 4,
                            City = "Nice"
                        },
                        new
                        {
                            LocationId = 5,
                            City = "Lille"
                        });
                });

            modelBuilder.Entity("backend_cube_solo.Api.Admins.Models.Admin", b =>
                {
                    b.HasOne("backend_cube_solo.Api.Employees.Models.Employee", "Employee")
                        .WithOne("Admin")
                        .HasForeignKey("backend_cube_solo.Api.Admins.Models.Admin", "EmployeeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_admins_employee");

                    b.Navigation("Employee");
                });

            modelBuilder.Entity("backend_cube_solo.Api.Employees.Models.Employee", b =>
                {
                    b.HasOne("backend_cube_solo.Api.Departments.Models.Department", "Department")
                        .WithMany("Employees")
                        .HasForeignKey("DepartmentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_employees_department");

                    b.HasOne("backend_cube_solo.Api.Locations.Models.Location", "Location")
                        .WithMany("Employees")
                        .HasForeignKey("LocationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_employees_location");

                    b.Navigation("Department");

                    b.Navigation("Location");
                });

            modelBuilder.Entity("backend_cube_solo.Api.Departments.Models.Department", b =>
                {
                    b.Navigation("Employees");
                });

            modelBuilder.Entity("backend_cube_solo.Api.Employees.Models.Employee", b =>
                {
                    b.Navigation("Admin");
                });

            modelBuilder.Entity("backend_cube_solo.Api.Locations.Models.Location", b =>
                {
                    b.Navigation("Employees");
                });
#pragma warning restore 612, 618
        }
    }
}
